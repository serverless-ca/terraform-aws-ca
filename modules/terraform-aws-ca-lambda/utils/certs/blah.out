versions pytest-8.2.2, python-3.12.3.final.0
invocation_dir=/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
cwd=/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
args=('--debug', 'blah.out', '.')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x105034500>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x105034500>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1055350a0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x105487a10>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x1042305f0>
          plugin_name: 4364371440
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x105034500>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1055350a0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x105487a10>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x105537020>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x1042d83e0>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x1042305f0>
          plugin_name: 4364371440
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x105034500>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x1055350a0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x105487a10>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x105537020>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x1042d83e0>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x105534dd0>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x1042305f0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x105034500>
          start_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
          startdir: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
      finish pytest_report_header --> [['rootdir: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs'], ['using: pytest-8.2.2']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['.'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=PosixPath('/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Package certs> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package certs> [collection]
      pytest_collectstart [hook]
          collector: <Package certs>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package certs>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/__init__.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/__init__.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/.pytest_cache
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/.pytest_cache
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/__pycache__
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/blah.out
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/blah.out
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/blah.out
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/blah.out
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/ca.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/ca.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/ca.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/ca.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto_kms_classes.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto_kms_classes.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto_kms_classes.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/crypto_kms_classes.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/db.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/db.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/db.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/db.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms_ca.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms_ca.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms_ca.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/kms_ca.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/s3.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/s3.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/s3.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/s3.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py
          pytest_pycollect_makemodule [hook]
              parent: <Package certs>
              module_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py
              path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py
          finish pytest_pycollect_makemodule --> <Module test_types.py> [hook]
        finish pytest_collect_file --> [<Module test_types.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x105034500>
            collection_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/types.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/types.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package certs>
            file_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/types.py
            path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/types.py
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport '.' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_types.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_types.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_types.py>
      early skip of rewriting module: utils [assertion]
      find_module called for: utils.certs [assertion]
      find_module called for: utils.certs.test_types [assertion]
      matched test file '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py' [assertion]
      found cached rewritten pyc for /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs/test_types.py [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: cryptography.__about__ [assertion]
      early skip of rewriting module: cryptography.x509 [assertion]
      early skip of rewriting module: cryptography.x509.certificate_transparency [assertion]
      early skip of rewriting module: cryptography.utils [assertion]
      early skip of rewriting module: cryptography.hazmat [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings._rust [assertion]
      early skip of rewriting module: _cffi_backend [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.hashes [assertion]
      early skip of rewriting module: cryptography.x509.verification [assertion]
      early skip of rewriting module: cryptography.x509.general_name [assertion]
      early skip of rewriting module: cryptography.x509.name [assertion]
      early skip of rewriting module: cryptography.x509.oid [assertion]
      early skip of rewriting module: cryptography.hazmat._oid [assertion]
      early skip of rewriting module: cryptography.x509.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.ssh [assertion]
      early skip of rewriting module: cryptography.exceptions [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed25519 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._cipheralgorithm [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
      early skip of rewriting module: bcrypt [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed448 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x448 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x25519 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.types [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dh [assertion]
      early skip of rewriting module: cryptography.x509.extensions [assertion]
      early skip of rewriting module: hashlib [assertion]
      early skip of rewriting module: _hashlib [assertion]
      early skip of rewriting module: _blake2 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.constant_time [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: utils.certs.types [assertion]
      early skip of rewriting module: validators [assertion]
      early skip of rewriting module: validators.between [assertion]
      early skip of rewriting module: validators._extremes [assertion]
      early skip of rewriting module: validators.utils [assertion]
      early skip of rewriting module: validators.btc_address [assertion]
      early skip of rewriting module: validators.card [assertion]
      early skip of rewriting module: validators.country_code [assertion]
      early skip of rewriting module: validators.domain [assertion]
      early skip of rewriting module: validators.email [assertion]
      early skip of rewriting module: validators.hostname [assertion]
      early skip of rewriting module: validators.ip_address [assertion]
      early skip of rewriting module: validators.hashes [assertion]
      early skip of rewriting module: validators.i18n [assertion]
      early skip of rewriting module: validators.i18n.es [assertion]
      early skip of rewriting module: validators.i18n.fi [assertion]
      early skip of rewriting module: validators.iban [assertion]
      early skip of rewriting module: validators.length [assertion]
      early skip of rewriting module: validators.mac_address [assertion]
      early skip of rewriting module: validators.slug [assertion]
      early skip of rewriting module: validators.url [assertion]
      early skip of rewriting module: validators.uuid [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/.venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: NameOID
            obj: <class 'cryptography.hazmat._oid.NameOID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: CsrInfo
            obj: <class 'utils.certs.types.CsrInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: Subject
            obj: <class 'utils.certs.types.Subject'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_defaults
            obj: <function test_csr_info_defaults at 0x105598400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x105564470>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_defaults>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_sans
            obj: <function test_csr_info_with_sans at 0x1055982c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x105535970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_sans>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_invalid_sans
            obj: <function test_csr_info_with_invalid_sans at 0x1057b7740>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x105535970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_invalid_sans>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_invalid_and_valid_sans
            obj: <function test_csr_info_with_invalid_and_valid_sans at 0x1057b7ce0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10559ccb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_invalid_and_valid_sans>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_purpose
            obj: <function test_csr_info_with_purpose at 0x1057b7d80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10551eba0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_purpose>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_invalid_purpose
            obj: <function test_csr_info_with_invalid_purpose at 0x1057b7e20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1057a80b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_invalid_purpose>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_invalid_and_valid_purposes
            obj: <function test_csr_info_with_invalid_and_valid_purposes at 0x1057b7ec0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10559ccb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_invalid_and_valid_purposes>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_csr_info_with_invalid_cn_and_no_san
            obj: <function test_csr_info_with_invalid_cn_and_no_san at 0x1057b7f60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10577f260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_csr_info_with_invalid_cn_and_no_san>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_subject_x509_name_simple
            obj: <function test_subject_x509_name_simple at 0x1057d4040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10551eba0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_subject_x509_name_simple>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_subject_x509_name
            obj: <function test_subject_x509_name at 0x1057d40e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1057a80b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_subject_x509_name>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_types.py>
            name: test_subject_from_x509_name
            obj: <function test_subject_from_x509_name at 0x1057d4180>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10559ccb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_subject_from_x509_name>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test_types.py' lenresult=11 outcome='passed'> [hook]
    genitems <Function test_csr_info_defaults> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_defaults>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_sans> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_sans>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_invalid_sans> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_invalid_sans>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_invalid_and_valid_sans> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_invalid_and_valid_sans>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_purpose> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_purpose>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_invalid_purpose> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_invalid_purpose>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_invalid_and_valid_purposes> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_invalid_and_valid_purposes>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_csr_info_with_invalid_cn_and_no_san> [collection]
      pytest_itemcollected [hook]
          item: <Function test_csr_info_with_invalid_cn_and_no_san>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_subject_x509_name_simple> [collection]
      pytest_itemcollected [hook]
          item: <Function test_subject_x509_name_simple>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_subject_x509_name> [collection]
      pytest_itemcollected [hook]
          item: <Function test_subject_x509_name>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_subject_from_x509_name> [collection]
      pytest_itemcollected [hook]
          item: <Function test_subject_from_x509_name>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test_types.py' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport '.' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x105034500>
          items: [<Function test_csr_info_defaults>, <Function test_csr_info_with_sans>, <Function test_csr_info_with_invalid_sans>, <Function test_csr_info_with_invalid_and_valid_sans>, <Function test_csr_info_with_purpose>, <Function test_csr_info_with_invalid_purpose>, <Function test_csr_info_with_invalid_and_valid_purposes>, <Function test_csr_info_with_invalid_cn_and_no_san>, <Function test_subject_x509_name_simple>, <Function test_subject_x509_name>, <Function test_subject_from_x509_name>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x105034500>
            items: [<Function test_csr_info_defaults>, <Function test_csr_info_with_sans>, <Function test_csr_info_with_invalid_sans>, <Function test_csr_info_with_invalid_and_valid_sans>, <Function test_csr_info_with_purpose>, <Function test_csr_info_with_invalid_purpose>, <Function test_csr_info_with_invalid_and_valid_purposes>, <Function test_csr_info_with_invalid_cn_and_no_san>, <Function test_subject_x509_name_simple>, <Function test_subject_x509_name>, <Function test_subject_from_x509_name>]
            start_path: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
            startdir: /Users/patrickdowney/Code/github.com/patdowney/terraform-aws-ca/modules/terraform-aws-ca-lambda/utils/certs
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=11>
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_defaults>
          nextitem: <Function test_csr_info_with_sans>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_defaults
            location: ('test_types.py', 6, 'test_csr_info_defaults')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_defaults>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_defaults>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_defaults' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_defaults' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_defaults' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_defaults>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_defaults>
          early skip of rewriting module: encodings.idna [assertion]
          early skip of rewriting module: stringprep [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_defaults>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_defaults' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_defaults' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_defaults' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_defaults>
            nextitem: <Function test_csr_info_with_sans>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_defaults>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_defaults' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_defaults' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_defaults' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_defaults
            location: ('test_types.py', 6, 'test_csr_info_defaults')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_sans>
          nextitem: <Function test_csr_info_with_invalid_sans>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_sans
            location: ('test_types.py', 14, 'test_csr_info_with_sans')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_sans>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_sans>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_sans' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_sans' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_sans' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_sans>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_sans>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_sans>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_sans' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_sans' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_sans' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_sans>
            nextitem: <Function test_csr_info_with_invalid_sans>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_sans>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_sans' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_sans' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_sans' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_sans
            location: ('test_types.py', 14, 'test_csr_info_with_sans')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_invalid_sans>
          nextitem: <Function test_csr_info_with_invalid_and_valid_sans>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_sans
            location: ('test_types.py', 21, 'test_csr_info_with_invalid_sans')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_invalid_sans>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_sans>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_invalid_sans>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_invalid_sans>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_sans>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_invalid_sans>
            nextitem: <Function test_csr_info_with_invalid_and_valid_sans>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_sans>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_sans' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_sans
            location: ('test_types.py', 21, 'test_csr_info_with_invalid_sans')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_invalid_and_valid_sans>
          nextitem: <Function test_csr_info_with_purpose>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_and_valid_sans
            location: ('test_types.py', 28, 'test_csr_info_with_invalid_and_valid_sans')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_invalid_and_valid_sans>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_and_valid_sans>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_invalid_and_valid_sans>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_invalid_and_valid_sans>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_and_valid_sans>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_invalid_and_valid_sans>
            nextitem: <Function test_csr_info_with_purpose>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_and_valid_sans>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_sans' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_and_valid_sans
            location: ('test_types.py', 28, 'test_csr_info_with_invalid_and_valid_sans')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_purpose>
          nextitem: <Function test_csr_info_with_invalid_purpose>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_purpose
            location: ('test_types.py', 34, 'test_csr_info_with_purpose')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_purpose>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_purpose>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_purpose' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_purpose' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_purpose' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_purpose>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_purpose>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_purpose>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_purpose' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_purpose' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_purpose' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_purpose>
            nextitem: <Function test_csr_info_with_invalid_purpose>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_purpose>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_purpose' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_purpose' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_purpose' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_purpose
            location: ('test_types.py', 34, 'test_csr_info_with_purpose')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_invalid_purpose>
          nextitem: <Function test_csr_info_with_invalid_and_valid_purposes>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_purpose
            location: ('test_types.py', 41, 'test_csr_info_with_invalid_purpose')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_invalid_purpose>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_purpose>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_invalid_purpose>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_invalid_purpose>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_purpose>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_invalid_purpose>
            nextitem: <Function test_csr_info_with_invalid_and_valid_purposes>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_purpose>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_purpose' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_purpose
            location: ('test_types.py', 41, 'test_csr_info_with_invalid_purpose')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_invalid_and_valid_purposes>
          nextitem: <Function test_csr_info_with_invalid_cn_and_no_san>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_and_valid_purposes
            location: ('test_types.py', 49, 'test_csr_info_with_invalid_and_valid_purposes')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_invalid_and_valid_purposes>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_and_valid_purposes>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_invalid_and_valid_purposes>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_invalid_and_valid_purposes>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_and_valid_purposes>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_invalid_and_valid_purposes>
            nextitem: <Function test_csr_info_with_invalid_cn_and_no_san>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_and_valid_purposes>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_and_valid_purposes' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_and_valid_purposes
            location: ('test_types.py', 49, 'test_csr_info_with_invalid_and_valid_purposes')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_csr_info_with_invalid_cn_and_no_san>
          nextitem: <Function test_subject_x509_name_simple>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_cn_and_no_san
            location: ('test_types.py', 55, 'test_csr_info_with_invalid_cn_and_no_san')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_csr_info_with_invalid_cn_and_no_san>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_cn_and_no_san>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_csr_info_with_invalid_cn_and_no_san>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_csr_info_with_invalid_cn_and_no_san>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_cn_and_no_san>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_csr_info_with_invalid_cn_and_no_san>
            nextitem: <Function test_subject_x509_name_simple>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_csr_info_with_invalid_cn_and_no_san>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_csr_info_with_invalid_cn_and_no_san' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_csr_info_with_invalid_cn_and_no_san
            location: ('test_types.py', 55, 'test_csr_info_with_invalid_cn_and_no_san')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_subject_x509_name_simple>
          nextitem: <Function test_subject_x509_name>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_subject_x509_name_simple
            location: ('test_types.py', 63, 'test_subject_x509_name_simple')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_subject_x509_name_simple>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_x509_name_simple>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_x509_name_simple' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_x509_name_simple' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_x509_name_simple' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_subject_x509_name_simple>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_subject_x509_name_simple>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_x509_name_simple>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_x509_name_simple' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_x509_name_simple' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_x509_name_simple' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_subject_x509_name_simple>
            nextitem: <Function test_subject_x509_name>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_x509_name_simple>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_x509_name_simple' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_x509_name_simple' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_x509_name_simple' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_subject_x509_name_simple
            location: ('test_types.py', 63, 'test_subject_x509_name_simple')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_subject_x509_name>
          nextitem: <Function test_subject_from_x509_name>
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_subject_x509_name
            location: ('test_types.py', 72, 'test_subject_x509_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_subject_x509_name>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_x509_name>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_x509_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_x509_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_x509_name' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_subject_x509_name>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_subject_x509_name>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_x509_name>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_x509_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_x509_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_x509_name' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_subject_x509_name>
            nextitem: <Function test_subject_from_x509_name>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_x509_name>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_x509_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_x509_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_x509_name' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_subject_x509_name
            location: ('test_types.py', 72, 'test_subject_x509_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_subject_from_x509_name>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: test_types.py::test_subject_from_x509_name
            location: ('test_types.py', 95, 'test_subject_from_x509_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_subject_from_x509_name>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_from_x509_name>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_from_x509_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_from_x509_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_from_x509_name' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_subject_from_x509_name>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_subject_from_x509_name>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_from_x509_name>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_from_x509_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_from_x509_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_from_x509_name' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_subject_from_x509_name>
            nextitem: None
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_subject_from_x509_name>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'test_types.py::test_subject_from_x509_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_types.py::test_subject_from_x509_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_types.py::test_subject_from_x509_name' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105034500>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_types.py::test_subject_from_x509_name
            location: ('test_types.py', 95, 'test_subject_from_x509_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=0 testsfailed=0 testscollected=11>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x105537020>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x105034500>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x105034500>
    finish pytest_unconfigure --> [] [hook]
